# Blueprint metadata
blueprint:
  name: Controller - Philips 929003017102 Hue Dimmer switch
  description: |
    # Controller - Philips 929003017102 Hue Dimmer switch

    ℹ️ Version 2024.01.24
  source_url: https://github.com/thumer/homeassistant_blueprints/blob/main/philips_929003017102.yaml
  domain: automation
  input:
    controller_entity:
      name: (Zigbee2MQTT) Controller Entity
      description: The action sensor of the controller to use for the automation. Choose a value only if the remote is integrated with Zigbee2MQTT.
      default: ''
      selector:
        entity:
          domain: sensor
    helper_last_controller_event:
      name: (Required) Helper - Last Controller Event
      description: Input Text used to store the last event fired by the controller. You will need to manually create a text input entity for this, please read the blueprint Additional Notes for more info.
      default: ''
      selector:
        entity:
          domain: input_text
    light_for_control:
      name: (Required) Light Entity for Status reading
      description: Licht, das gesteuert werden soll.
      default: ''
      selector:
        entity:
          domain: light
    light_device_for_control:
      name: (Required) Light Device for Status reading
      description: Licht, das gesteuert werden soll.
      default: ''
      selector:
        device:
          integration: light
    up_down_toggle:
      name: (Required) Toggle for dimming
      description: Toggle, ob zuletzt nach oben oder nach unten gedimmt wurde.
      default: ''
      selector:
        entity:
          domain: input_boolean
    # inputs for looping custom actions on long button press events until the corresponding release event is received
    button_on_long_loop:
      name: (Optional) On button long press - loop until release
      description: Loop the on button action until the button is released.
      default: false
      selector:
        boolean:
    button_on_long_max_loop_repeats:
      name: (Optional) On button long press - Maximum loop repeats
      description: >-
        Maximum number of repeats for the custom action, when looping is enabled.
        Use it as a safety limit to prevent an endless loop in case the corresponding stop event is not received.
      default: 500
      selector:
        number:
          min: 1
          max: 5000
          mode: slider
          step: 1
    button_off_long_loop:
      name: (Optional) Off button long press - loop until release
      description: Loop the off button action until the button is released.
      default: false
      selector:
        boolean:
    button_off_long_max_loop_repeats:
      name: (Optional) Off button long press - Maximum loop repeats
      description: >-
        Maximum number of repeats for the custom action, when looping is enabled.
        Use it as a safety limit to prevent an endless loop in case the corresponding stop event is not received.
      default: 500
      selector:
        number:
          min: 1
          max: 5000
          mode: slider
          step: 1
    helper_debounce_delay:
      name: (Optional) Helper - Debounce delay
      description:
        Delay used for debouncing RAW controller events, by default set to 0. A value of 0 disables the debouncing feature. Increase this value if you notice custom actions or linked Hooks running multiple times when interacting with the device. When the controller needs to be debounced,
        usually a value of 100 is enough to remove all duplicate events.
      default: 0
      selector:
        number:
          min: 0
          max: 1000
          unit_of_measurement: milliseconds
          mode: box
          step: 10
# Automation schema
variables:
  # convert input tags to variables, to be used in templates
  button_on_long_loop: !input button_on_long_loop
  button_on_long_max_loop_repeats: !input button_on_long_max_loop_repeats
  button_off_long_loop: !input button_off_long_loop
  button_off_long_max_loop_repeats: !input button_off_long_max_loop_repeats
  helper_last_controller_event: !input helper_last_controller_event
  helper_debounce_delay: !input helper_debounce_delay
  # mapping between actions
  actions_mapping:
    button_on_short: [left_press]
    button_on_long: [left_hold]
    button_on_release: [left_press_release]
  # no need to perform this task at automation runtime
  button_on_short: '{{ actions_mapping["button_on_short"] }}'
  button_on_long: '{{ actions_mapping["button_on_long"] }}'
  button_on_release: '{{ actions_mapping["button_on_release"] }}'
  # build data to send within a controller event
  controller_entity: !input controller_entity
  controller_id: controller_entity
  light_for_control: !input light_for_control
  light_device_for_control: !input light_device_for_control
  up_down_toggle: !input up_down_toggle
mode: restart
max_exceeded: silent
trigger:
  # trigger for zigbee2mqtt
  - platform: event
    event_type: state_changed
    event_data:
      entity_id: !input controller_entity
condition:
  - condition: and
    conditions:
      # check that the button event is not empty
      - >-
        {%- set trigger_action -%}
        {{ trigger.event.data.new_state.state }}
        {%- endset -%}
        {{ trigger_action not in ["","None"] }}
      # only for zigbee2mqtt, check if the event is relative to a real state change, and not only some minor changes in the sensor attributes
      # this is required since multiple state_changed events are fired for a single button press, with the result of the automation being triggered multiple times
      - '{{ trigger.event.data.new_state.state != trigger.event.data.old_state.state }}'
action:
  # debouncing - when automation is triggered multiple times, the last automation run is the one which completes execution, due to mode restart
  # therefore previous runs must wait for the debounce delay before executing any other action
  # if the delay expires and the automation is still running it means it's the last run and execution can continue
  - delay:
      milliseconds: !input helper_debounce_delay
  # extract button event from the trigger
  # provide a single string value to check against
  - variables:
      trigger_action: >-
        {{ trigger.event.data.new_state.state }}
      trigger_delta: '{{ (as_timestamp(now()) - ((states(helper_last_controller_event) | from_json).t if helper_last_controller_event is not none and (states(helper_last_controller_event) | regex_match("^\{((\"a\": \".*\"|\"t\": \d+\.\d+)(, )?){2}\}$")) else as_timestamp("1970-01-01 00:00:00"))) * 1000 }}'
  # update helper
  - service: input_text.set_value
    data:
      entity_id: !input helper_last_controller_event
      value: '{{ {"a":trigger_action,"t":as_timestamp(now())} | to_json }}'
  # choose the sequence to run based on the received button event
  - choose:
      - conditions: '{{ trigger_action | string in button_on_long }}'
        sequence:
          - choose:
              - conditions: '{{ is_state("up_down_toggle", "off") }}'
                sequence:
                  - service: input_boolean.turn_on
                    data:
                      entity_id: up_down_toggle
                  - choose:
                      # if looping is enabled, loop the action for a finite number of iterations
                      - conditions: '{{ button_on_long_loop }}'
                        sequence:
                          - repeat:
                              while: '{{ repeat.index < button_on_long_max_loop_repeats | int }}'
                              sequence:
                                - device_id: light_device_for_control
                                  domain: light
                                  entity_id: light_for_control
                                  type: brightness_increase
                    # if looping is not enabled run the custom action only once
                    default:
                      - device_id: light_device_for_control
                        domain: light
                        entity_id: light_for_control
                        type: brightness_increase
              - conditions: '{{ is_state("up_down_toggle", "on") }}'
                sequence:
                  - service: input_boolean.turn_off
                    data:
                      entity_id: up_down_toggle
                  - choose:
                      # if looping is enabled, loop the action for a finite number of iterations
                      - conditions: '{{ button_off_long_loop }}'
                        sequence:
                          - repeat:
                              while: '{{ repeat.index < button_off_long_max_loop_repeats | int }}'
                              sequence:
                                - device_id: light_device_for_control
                                  domain: light
                                  entity_id: light_for_control
                                  type: brightness_decrease
                    # if looping is not enabled run the custom action only once
                    default:
                      - device_id: light_device_for_control
                        domain: light
                        entity_id: light_for_control
                        type: brightness_decrease
      - conditions: '{{ trigger_action | string in button_on_release }}'
        sequence:
          - choose:
              - conditions: '{{ is_state("light_for_control", "off") }}'
                sequence:
                  - service: light.turn_on
                    metadata: {}
                    data: {}
                    target:
                      entity_id: light_for_control
              - conditions: '{{ is_state("light_for_control", "on") }}'
                sequence:
                  - service: light.turn_off
                    metadata: {}
                    data: {}
                    target:
                      entity_id: light_for_control